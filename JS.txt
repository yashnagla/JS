Why JS?
JS improves the user experience of the web page by converting it from a static page into an interactive one.
OR 
JS adds behavior to web pages.


How website front-end works (client-side)?
A web-site uses three entities to work properly:-
1.HTML/HTML5:-
HTML stands for Hyper Text Markup Language.
It is the standard markup language for creating web pages.
It describes the structure of a web page.
2. CSS/CSS3:-
CSS stands for Cascading Style Sheets.
It describes how HTML elements are to be displayed on screen, paper or in other media.
With CSS, we can control the color, font, size of text, etc.
3.JS:-
JS stands for JavaScript.
It is a text-based programming language used both on client-side and server-side that allows you to make web pages interactive.
It improves the user experience of the web page by converting it from a static page into an interactive one.

Naming Variables:- Rules and Best Practices:-
The first character must be a letter or an underscore (_) or an dollar($). We can't use a number as the first character.
The rest of the variable name can include any letter, any number or underscore. Can't use any other characters, including spaces.
Variable names are case sensitive.
No limit to the length of the variable name.
You can't use one of JavaScript's reserved words as a variable name.

Data Types in JS:-
1. Undefined : typeof instance === "undefined"
2. Boolean : typeof instance === "boolean"
3. Number : typeof instance === "number"
4. String : typeof instance === "string"
5. BigInt : typeof instance === "bigint"
6. Symbol : typeof instance === "symbol"
**Note:- For more references visit - https://developer.moxilla.org/en-US/docs/Web/JavaScript/Data_structures

null and undefined:-
In JavaScript, null and undefined are both special values that represent the absence of a value. However, they are used in different contexts and have different meanings.
undefined is a primitive value that is automatically assigned to a variable that has been declared but has not been assigned a value. It can also be returned by a function if no explicit return value is specified.
null, on the other hand, is also a primitive value that represents the intentional absence of any object value. It is often used to indicate that a variable or property exists but has no value.
Here are some key differences between null and undefined:
1.undefined is a value that is automatically assigned to a variable that has been declared but has not been assigned a value, whereas null is a value that is explicitly assigned to a variable or property to indicate the absence of a value.
2.undefined is a primitive value, whereas null is also a primitive value.
3.undefined is not equal to null (undefined === null returns false), but they are considered loosely equal (undefined == null returns true).
4.undefined is returned by a function if no explicit return value is specified, whereas null is often used as an explicit return value to indicate the absence of a value.
5.undefined is a property of the global object (window.undefined in a browser environment), whereas null is a standalone value and does not have a property associated with it.

What is NaN?
In JavaScript, NaN stands for "Not a Number". It is a special value that represents an undefined or unrepresentable value in numerical operations.
NaN is a property of the global object (window.NaN in a browser environment) and is a non-configurable, non-writable, and non-enumerable property.
NaN is a result of an operation that cannot be represented as a number. For example, the result of an operation that involves a non-numeric string, an undefined value, or an infinite value is NaN.


Why Functions?
We can reuse code: define the code once and use it multiple times. This makes our program shorter and easier to maintain.
We can use the same code multiple times with different arguments to produce different results. This property makes functions very useful.

or

A function is a group of reusable code which can be called anywhere in our program. This eliminates the need of writing the same code again and again.